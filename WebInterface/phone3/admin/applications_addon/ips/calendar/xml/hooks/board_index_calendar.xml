<?xml version="1.0" encoding="utf-8"?>
<hookexport>
  <hookdata>
    <config>
      <hook_name>Calendar</hook_name>
      <hook_desc>Displays the mini calendar for the current month</hook_desc>
      <hook_author>Invision Power Services, Inc.</hook_author>
      <hook_email/>
      <hook_website>http://www.</hook_website>
      <hook_update_check/>
      <hook_requirements><![CDATA[a:4:{s:20:"hook_ipb_version_min";i:3;s:20:"hook_ipb_version_max";i:0;s:20:"hook_php_version_min";s:0:"";s:20:"hook_php_version_max";s:0:"";}]]></hook_requirements>
      <hook_version_human>1.0.0</hook_version_human>
      <hook_version_long/>
      <hook_extra_data/>
      <hook_key>calendar</hook_key>
    </config>
  </hookdata>
  <hookfiles>
    <file>
      <hook_file_real>boardIndexCalendar.php</hook_file_real>
      <hook_type>templateHooks</hook_type>
      <hook_classname>boardIndexCalendar</hook_classname>
      <hook_data><![CDATA[a:6:{s:15:"classToOverload";N;s:9:"skinGroup";s:11:"skin_boards";s:12:"skinFunction";s:18:"boardIndexTemplate";s:4:"type";s:7:"foreach";s:2:"id";s:11:"side_blocks";s:8:"position";s:9:"outer.pre";}]]></hook_data>
      <hooks_source><![CDATA[<?php

class boardIndexCalendar
{
	public $registry;
	
	public function __construct()
	{
        /* Make registry objects */
		$this->registry		=  ipsRegistry::instance();
		$this->DB			=  $this->registry->DB();
		$this->settings		=& $this->registry->fetchSettings();
		$this->lang			=  $this->registry->getClass('class_localization');
	}
	
	public function getOutput()
	{
		/* Load language  */
		$this->registry->class_localization->loadLanguageFile( array( 'public_calendar' ) );
		
		/* Load calendar library */		
		require_once( IPSLib::getAppDir( 'calendar' ) .'/modules_public/calendar/calendars.php' );
		$cal = new public_calendar_calendar_calendars( $this->registry );
		$cal->makeRegistryShortcuts( $this->registry );
		
		/* Get current month and year */
		$a = explode( ',', gmdate( 'Y,n,j,G,i,s', time() + $this->registry->class_localization->getTimeOffset() ) );
		
		$this->now_date = array(
								 'year'    => $a[0],
								 'mon'     => $a[1],
							   );
		
		/* Setup language arrays */
		$cal->month_words = array( $this->lang->words['M_1'] , $this->lang->words['M_2'] , $this->lang->words['M_3'] ,
									$this->lang->words['M_4'] , $this->lang->words['M_5'] , $this->lang->words['M_6'] ,
									$this->lang->words['M_7'] , $this->lang->words['M_8'] , $this->lang->words['M_9'] ,
									$this->lang->words['M_10'], $this->lang->words['M_11'], $this->lang->words['M_12'] );
        
		if( ! $this->settings['ipb_calendar_mon'] )
		{
			$cal->day_words   = array( $this->lang->words['D_0'], $this->lang->words['D_1'], $this->lang->words['D_2'],
										$this->lang->words['D_3'], $this->lang->words['D_4'], $this->lang->words['D_5'],
										$this->lang->words['D_6'] );
		}
		else
		{
			$cal->day_words   = array( $this->lang->words['D_1'], $this->lang->words['D_2'], $this->lang->words['D_3'],
										$this->lang->words['D_4'], $this->lang->words['D_5'], $this->lang->words['D_6'],
										$this->lang->words['D_0'] );
		}		
		
		/* Return calendar */
		return "<div id='mini_calendars' class='calendar_wrap'>". $cal->getMiniCalendar( $this->now_date['mon'], $this->now_date['year'] ) . '</div><br />';
	}
}]]></hooks_source>
    </file>
  </hookfiles>
  <hookextras_settings/>
  <hookextras_language/>
  <hookextras_modules/>
  <hookextras_help/>
  <hookextras_templates/>
  <hookextras_tasks/>
  <hookextras_database_create/>
  <hookextras_database_alter/>
  <hookextras_database_update/>
  <hookextras_database_insert/>
</hookexport>
